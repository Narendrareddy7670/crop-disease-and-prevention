import streamlit as st
import pandas as pd
import joblib

# Load trained models
rf_model = joblib.load("random_forest_pesticide_model.pkl")
label_encoders = joblib.load("label_encoders.pkl")
pesticide_encoder = joblib.load("pesticide_encoder.pkl")

# Load crop-disease-symptom dataset
try:
    crop_disease_symptom_df = pd.read_csv("expanded_crops_diseases_dataset.csv")  # Ensure this dataset exists
except FileNotFoundError:
    st.error("Error: 'expanded_crops_diseases_dataset.csv' file not found! Please check the file path.")
    st.stop()

# Language dictionary
languages = {
    "English": {
        "title": "Crop Disease & Pesticide Recommendation",
        "select_language": "Choose Language",
        "select_crop": "Select Crop",
        "select_disease": "Select Disease",
        "select_symptoms": "Select Symptoms",
        "predict": "Predict Pesticide",
        "recommended": "Recommended Pesticide: ",
        "error": "Error: Unknown input value detected!"
    },
    "Telugu": {
        "title": "р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр░┐ р░ор░░р░┐р░пр▒Б р░кр▒Бр░░р▒Бр░Чр▒Бр░ор░Вр░жр▒Б р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б",
        "select_language": "р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "select_crop": "р░кр░Вр░Яр░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "select_disease": "р░╡р▒Нр░пр░╛р░зр░┐р░ир░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "select_symptoms": "р░▓р░Хр▒Нр░╖р░гр░╛р░▓р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐",
        "predict": "р░кр▒Бр░░р▒Бр░Чр▒Бр░ор░Вр░жр▒Бр░ир▒Б р░Кр░╣р░┐р░Вр░Ър▒Б",
        "recommended": "р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Б р░Ър▒Зр░╕р░┐р░и р░кр▒Бр░░р▒Бр░Чр▒Бр░ор░Вр░жр▒Б: ",
        "error": "р░кр▒Кр░░р░кр░╛р░Яр▒Б: р░др▒Жр░▓р░┐р░пр░ир░┐ р░▓р▒Жр░Хр▒Нр░Хр░┐р░Вр░кр▒Б р░╡р░┐р░▓р▒Бр░╡ р░Хр░ир▒Бр░Чр▒Кр░ир░мр░бр░┐р░Вр░жр░┐!"
    },
    "Tamil": {
        "title": "рокропро┐ро░рпН роирпЛропрпН рооро▒рпНро▒рпБроорпН рокрпВроЪрпНроЪро┐роХрпНроХрпКро▓рпНро▓ро┐ рокро░ро┐роирпНродрпБро░рпИ",
        "select_language": "роорпКро┤ро┐ родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН",
        "select_crop": "рокропро┐ро░рпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН",
        "select_disease": "роирпЛропрпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН",
        "select_symptoms": "роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ родрпЗро░рпНро╡рпБ роЪрпЖропрпНропро╡рпБроорпН",
        "predict": "рокрпВроЪрпНроЪро┐роХрпНроХрпКро▓рпНро▓ро┐ропрпИ роХрогро┐роХрпНроХро╡рпБроорпН",
        "recommended": "рокро░ро┐роирпНродрпБро░рпИроХрпНроХрокрпНрокроЯрпНроЯ рокрпВроЪрпНроЪро┐роХрпНроХрпКро▓рпНро▓ро┐: ",
        "error": "рокро┐ро┤рпИ: родрпЖро░ро┐ропро╛род роЙро│рпНро│рпАроЯрпБ роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ!"
    },
    "Hindi": {
        "title": "рдлрд╕рд▓ рд░реЛрдЧ рдФрд░ рдХреАрдЯрдирд╛рд╢рдХ рд╕рд┐рдлрд╛рд░рд┐рд╢",
        "select_language": "рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ",
        "select_crop": "рдлрд╕рд▓ рдЪреБрдиреЗрдВ",
        "select_disease": "рд░реЛрдЧ рдЪреБрдиреЗрдВ",
        "select_symptoms": "рд▓рдХреНрд╖рдг рдЪреБрдиреЗрдВ",
        "predict": "рдХреАрдЯрдирд╛рд╢рдХ рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдПрдВ",
        "recommended": "рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд┐рдпрд╛ рдЧрдпрд╛ рдХреАрдЯрдирд╛рд╢рдХ: ",
        "error": "рддреНрд░реБрдЯрд┐: рдЕрдЬреНрдЮрд╛рдд рдЗрдирдкреБрдЯ рдорд╛рди рдкрд╛рдпрд╛ рдЧрдпрд╛!"
    }
}
crop_translations = {
    "Apple": {"Telugu": "р░Жр░кр░┐р░▓р▒Н", "Tamil": "роЖрокрпНрокро┐ро│рпН", "Hindi": "рд╕реЗрдм"},
    "Wheat": {"Telugu": "р░Чр▒Лр░зр▒Бр░о", "Tamil": "роХрпЛродрпБроорпИ", "Hindi": "рдЧреЗрд╣реВрдВ"},
    "Rice (Paddy)": {"Telugu": "р░╡р░░р░┐ (р░зр░╛р░ир▒Нр░пр░В)", "Tamil": "роирпЖро▓рпН", "Hindi": "рдзрд╛рди"},
    "Cotton": {"Telugu": "р░кр░др▒Нр░др░┐", "Tamil": "рокро░рпБродрпНродро┐", "Hindi": "рдХрдкрд╛рд╕"},
    "Sugarcane": {"Telugu": "р░Ър▒Жр░░р▒Бр░Хр▒Б", "Tamil": "роХро░рпБроорпНрокрпБ", "Hindi": "рдЧрдиреНрдирд╛"},
    "Tomato": {"Telugu": "р░Яр░ор░╛р░Я", "Tamil": "родроХрпНроХро╛ро│ро┐", "Hindi": "рдЯрдорд╛рдЯрд░"},
    "Potato": {"Telugu": "р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к", "Tamil": "роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ", "Hindi": "рдЖрд▓реВ"},
    "Areca Nut": {"Telugu": "р░кр▒Бр░Чр░╛р░Хр░╛р░п", "Tamil": "рокро╛роХрпНроХрпБ", "Hindi": "рд╕реБрдкрд╛рд░реА"},
    "Arecanut": {"Telugu": "р░кр▒Бр░Чр░╛р░Хр░╛р░п", "Tamil": "рокро╛роХрпНроХрпБ", "Hindi": "рд╕реБрдкрд╛рд░реА"},
    "Arhar (Tur) / Pigeon Pea": {"Telugu": "р░Хр░Вр░жр░┐", "Tamil": "родрпБро╡ро░рпИ", "Hindi": "рдЕрд░рд╣рд░ (рддреВрд░)"},
    "Bajra (Pearl Millet)": {"Telugu": "р░╕р░Ьр▒Нр░Ьр░▓р▒Б", "Tamil": "роХроорпНрокрпБ", "Hindi": "рдмрд╛рдЬрд░рд╛"},
    "Banana": {"Telugu": "р░Ер░░р░Яр░┐", "Tamil": "ро╡ро╛ро┤рпИ", "Hindi": "рдХреЗрд▓рд╛"},
    "Barley": {"Telugu": "р░Ьр░╡", "Tamil": "рокро╛ро░рпНро▓ро┐", "Hindi": "рдЬреМ"},
    "Capsicum": {"Telugu": "р░жр▒Кр░Вр░Ч р░ор░┐р░░р░к", "Tamil": "роХрпБроЯрпИ рооро┐ро│роХро╛ропрпН", "Hindi": "рд╢рд┐рдорд▓рд╛ рдорд┐рд░реНрдЪ"},
    "Cardamom": {"Telugu": "р░Пр░▓р░Хр▒Бр░▓р▒Б", "Tamil": "роПро▓роХрпНроХро╛ропрпН", "Hindi": "рдЗрд▓рд╛рдпрдЪреА"},
    "Castor Seed": {"Telugu": "р░Жр░ор▒Бр░жр░В р░Чр░┐р░Вр░Ь", "Tamil": "роЖроорогроХрпНроХрпБ ро╡ро┐родрпИ", "Hindi": "рдЕрд░рдВрдбреА рдХрд╛ рдмреАрдЬ"},
    "Chana (Chickpeas)": {"Telugu": "р░╕р▒Жр░ир░Чр░▓р▒Б", "Tamil": "роХроЯро▓рпИ", "Hindi": "рдЪрдирд╛"},
    "Chili": {"Telugu": "р░ор░┐р░░р░кр░Хр░╛р░п", "Tamil": "рооро┐ро│роХро╛ропрпН", "Hindi": "рдорд┐рд░реНрдЪ"},
    "Chilli": {"Telugu": "р░ор░┐р░░р░кр░Хр░╛р░п", "Tamil": "рооро┐ро│роХро╛ропрпН", "Hindi": "рдорд┐рд░реНрдЪ"},
    "Coconut": {"Telugu": "р░Хр▒Кр░мр▒Нр░мр░░р░┐", "Tamil": "родрпЗроЩрпНроХро╛ропрпН", "Hindi": "рдирд╛рд░рд┐рдпрд▓"},
    "Coffee": {"Telugu": "р░Хр░╛р░лр▒А", "Tamil": "роХро╛рокро┐", "Hindi": "рдХреЙрдлрд╝реА"},
    "Coriander": {"Telugu": "р░зр░ир░┐р░пр░╛р░▓р▒Б", "Tamil": "роХрпКродрпНродрооро▓рпНро▓ро┐", "Hindi": "рдзрдирд┐рдпрд╛"},
    "Garlic": {"Telugu": "р░╡р▒Жр░▓р▒Нр░▓р▒Бр░▓р▒Нр░▓р░┐", "Tamil": "рокрпВрогрпНроЯрпБ", "Hindi": "рд▓рд╣рд╕реБрди"},
    "Ginger": {"Telugu": "р░Ер░▓р▒Нр░▓р░В", "Tamil": "роЗроЮрпНроЪро┐", "Hindi": "рдЕрджрд░рдХ"},
    "Grapes": {"Telugu": "р░жр▒Нр░░р░╛р░Хр▒Нр░╖", "Tamil": "родро┐ро░ро╛роЯрпНроЪрпИ", "Hindi": "рдЕрдВрдЧреВрд░"},
    "Groundnut": {"Telugu": "р░╡р▒Зр░░р▒Бр░╢р▒Жр░ир░Ч", "Tamil": "роиро┐ро▓роХрпНроХроЯро▓рпИ", "Hindi": "рдореВрдВрдЧрдлрд▓реА"},
    "Groundnut (Peanut)": {"Telugu": "р░╡р▒Зр░░р▒Бр░╢р▒Жр░ир░Ч", "Tamil": "роиро┐ро▓роХрпНроХроЯро▓рпИ", "Hindi": "рдореВрдВрдЧрдлрд▓реА"},
    "Jowar (Sorghum)": {"Telugu": "р░Ьр▒Кр░ир▒Нр░и", "Tamil": "роЪрпЛро│роорпН", "Hindi": "рдЬреНрд╡рд╛рд░"},
    "Jute": {"Telugu": "р░Ьр▒Нр░пр▒Вр░Яр▒Н", "Tamil": "роЪрогро▓рпН", "Hindi": "рдЬреВрдЯ"},
    "Maize": {"Telugu": "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и", "Tamil": "роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН", "Hindi": "рдордХреНрдХрд╛"},
    "Maize (Corn)": {"Telugu": "р░ор▒Кр░Хр▒Нр░Хр░Ьр▒Кр░ир▒Нр░и", "Tamil": "роороХрпНроХро╛роЪрпНроЪрпЛро│роорпН", "Hindi": "рдордХреНрдХрд╛"},
    "Mango": {"Telugu": "р░ор░╛р░ор░┐р░бр░┐", "Tamil": "рооро╛роорпНрокро┤роорпН", "Hindi": "рдЖрдо"},
    "Moong (Green Gram)": {"Telugu": "р░кр▒Жр░╕р░░", "Tamil": "рокроЪрпНроЪрпИрокрпНрокропро▒рпБ", "Hindi": "рдореВрдВрдЧ"},
    "Mustard": {"Telugu": "р░Жр░╡р░╛р░▓р▒Б", "Tamil": "роХроЯрпБроХрпБ", "Hindi": "рд╕рд░рд╕реЛрдВ"},
    "Onion": {"Telugu": "р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░п", "Tamil": "ро╡рпЖроЩрпНроХро╛ропроорпН", "Hindi": "рдкреНрдпрд╛рдЬ"},
    "Rubber": {"Telugu": "р░░р░мр▒Нр░мр░░р▒Б", "Tamil": "ро░рокрпНрокро░рпН", "Hindi": "рд░рдмрд░"},
    "Sorghum (Jowar)": {"Telugu": "р░Ьр▒Кр░ир▒Нр░и", "Tamil": "роЪрпЛро│роорпН", "Hindi": "рдЬреНрд╡рд╛рд░"},
    "Soybean": {"Telugu": "р░╕р▒Лр░пр░╛р░мр▒Ар░ир▒Н", "Tamil": "роЪрпЛропро╛", "Hindi": "рд╕реЛрдпрд╛рдмреАрди"},
    "Sunflower": {"Telugu": "р░╕р▒Вр░░р▒Нр░пр░ор▒Бр░Цр░┐", "Tamil": "роЪрпВро░ро┐ропроХро╛роирпНродро┐", "Hindi": "рд╕реВрд░рдЬрдореБрдЦреА"},
    "Tea": {"Telugu": "р░Яр▒А", "Tamil": "родрпЗропро┐ро▓рпИ", "Hindi": "рдЪрд╛рдп"},
    "Tobacco": {"Telugu": "р░кр▒Кр░Чр░╛р░Хр▒Б", "Tamil": "рокрпБроХрпИропро┐ро▓рпИ", "Hindi": "рддрдВрдмрд╛рдХреВ"},
    "Pearl Millet (Bajra)": {"Telugu": "р░╕р░Ьр▒Нр░Ьр░▓р▒Б", "Tamil": "роХроорпНрокрпБ", "Hindi": "рдмрд╛рдЬрд░рд╛"},
    "Pomegranate": {"Telugu": "р░жр░╛р░ир░┐р░ор▒Нр░о", "Tamil": "рооро╛родрпБро│рпИ", "Hindi": "рдЕрдирд╛рд░"},
    "Pulses (Lentil, Chickpea, Pigeon Pea)": {"Telugu": "р░кр░кр▒Нр░кр▒Бр░▓р▒Б (р░ор░┐р░ир▒Бр░ор▒Бр░▓р▒Б, р░╕р▒Жр░ир░Чр░▓р▒Б, р░Хр░Вр░жр░┐)", "Tamil": "рокро░рпБрокрпНрокрпБ ро╡роХрпИроХро│рпН", "Hindi": "рджрд╛рд▓реЗрдВ"},
    "Ragi (Finger Millet)": {"Telugu": "р░░р░╛р░Чр░┐", "Tamil": "роХрпЗро┤рпНро╡ро░роХрпБ", "Hindi": "рд░рд╛рдЧреА"},
    "Turmeric": {"Telugu": "р░кр░╕р▒Бр░кр▒Б", "Tamil": "роороЮрпНроЪро│рпН", "Hindi": "рд╣рд▓реНрджреА"},
    "Urad (Black Gram)": {"Telugu": "р░ор░┐р░ир▒Бр░ор▒Бр░▓р▒Б", "Tamil": "роЙро│рпБроирпНродрпБ", "Hindi": "рдЙрдбрд╝рдж"}
}
def translate_crops(crop_list, language):
    """Translate crop names to selected language"""
    if language == "English":
        return crop_list  # No translation needed
    return [crop_translations.get(crop, {}).get(language, crop) for crop in crop_list]

def reverse_translate_crop(selected_crop, language):
    """Convert translated crop name back to English for model processing"""
    for eng_crop, translations in crop_translations.items():
        if translations.get(language) == selected_crop:
            return eng_crop  # Return English name
    return selected_crop  # Return as is if no match found

def main():
    # Select language
    selected_language = st.selectbox("ЁЯМН " + languages["English"]["select_language"], list(languages.keys()))
    lang = languages[selected_language]

    st.title(lang["title"])

    # Select Crop (Dropdown in Telugu, Tamil, or Hindi)
    crop_options = sorted(crop_disease_symptom_df["Crop"].unique())  # Unique crop names in English
    translated_crops = translate_crops(crop_options, selected_language)
    selected_crop = st.selectbox(lang["select_crop"], translated_crops)
    crop = reverse_translate_crop(selected_crop, selected_language)

    # Filter diseases based on selected crop
    filtered_diseases = crop_disease_symptom_df[crop_disease_symptom_df["Crop"] == crop]["Disease"].unique()
    disease = st.selectbox(lang["select_disease"], filtered_diseases)

    # Filter symptoms based on selected disease
    filtered_symptoms = crop_disease_symptom_df[
        (crop_disease_symptom_df["Crop"] == crop) & (crop_disease_symptom_df["Disease"] == disease)
    ]["Symptoms"].unique()
    symptoms = st.selectbox(lang["select_symptoms"], filtered_symptoms)

    if st.button(lang["predict"]):
        try:
            # Encode user input
            crop_encoded = label_encoders['Crop'].transform([crop])[0]
            disease_encoded = label_encoders['Disease'].transform([disease])[0]
            symptoms_encoded = label_encoders['Symptoms'].transform([symptoms])[0]
        
            # Make prediction
            input_data = pd.DataFrame([[crop_encoded, disease_encoded, symptoms_encoded]], 
                                      columns=['Crop', 'Disease', 'Symptoms'])
            prediction = rf_model.predict(input_data)
            pesticide = pesticide_encoder.inverse_transform(prediction)[0]
        
            st.success(f"{lang['recommended']} {pesticide}")
        
        except Exception as e:
            st.error(f"тЪая╕П {lang['error']} \n\n {e}")

if __name__ == "__main__":
    main()
